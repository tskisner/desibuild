#!/usr/bin/env python

from __future__ import (absolute_import, division, print_function,
    unicode_literals)

import sys
import os
import inspect
import re
import argparse
import subprocess as sp

# The directory where this script is located.
scriptdir = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))

# Add our tools directory to the search path.
sys.path.append(os.path.join(scriptdir, "tools"))

# Import our helper utilities
import desibuild as tools


# Get our options

parser = argparse.ArgumentParser(description="Set default versions of "
    "installed DESI packages.")
parser.add_argument("--versions", required=True, type=str, default=None,
    help="Path to the versions file.  File format is 3 columns of "
    "<package name> <git URL> <branch/tag name>.")
parser.add_argument("--prefix", required=True, type=str, default=None,
    help="Installation prefix.")
parser.add_argument("--moduledir", required=False, type=str, default=None,
    help="Module file install directory.  Defaults to <prefix>/modulefiles.")
parser.add_argument("--gitdir", required=False, type=str, default=None,
    help="Directory containing the git clones of DESI packages.  "
    "Defaults to current directory.")


args = parser.parse_args()

# Module install location

moddir = args.moduledir
if moddir is None:
    moddir = os.path.join(args.prefix, "modulefiles")

# Check install prefix

if not os.path.isdir(args.prefix):
    raise RuntimeError("Install prefix {} does not exist".format(args.prefix))
if not os.path.isdir(moddir):
    raise RuntimeError("Modulefile directory {} does not exist".format(moddir))

# Get package information

pkgs = tools.load_versions(args.versions)

# Are we overriding versions with the current git checkouts?

here = os.path.abspath(os.getcwd())

if args.gitdir is not None:
    os.chdir(args.gitdir)
    for pkg in pkgs:
        os.chdir(pkg["name"])
        gitver = tools.git_version()
        pkg["version"] = gitver
        os.chdir("..")
    os.chdir(here)

# Process all packages

depstr = ""

for pkg in pkgs:
    pkgmoddir = os.path.join(moddir, pkg["name"])
    pkgver = os.path.join(pkgmoddir, ".version_{}".format(pkg["version"]))
    verfile = os.path.join(pkgmoddir, ".version")
    if not os.path.isfile(pkgver):
        raise RuntimeError("version file {} for package {} does not exist".format(pkgver, pkg["name"]))
    if os.path.isfile(verfile) or os.path.islink(verfile):
        os.remove(verfile)
    os.symlink(pkgver, verfile)
    depstr = "{}{}".format(depstr, pkg["version"])

buildver = tools.build_version(scriptdir)
desiversion = tools.desi_version(buildver, depstr)

# Process top desi module

pkgmoddir = os.path.join(moddir, "desi")
pkgver = os.path.join(pkgmoddir, ".version_{}".format(desiversion))
if not os.path.isfile(pkgver):
    raise RuntimeError("version file {} for desi module does not exist".format(pkgver))
verfile = os.path.join(pkgmoddir, ".version")
if os.path.isfile(verfile) or os.path.islink(verfile):
    os.remove(verfile)
os.symlink(pkgver, verfile)

# Also do a symlink for the shell setup

setupfile = os.path.join(args.prefix, "setup_desi_{}.sh".format(desiversion))
lfile = os.path.join(args.prefix, "setup_desi.sh")
if os.path.isfile(lfile) or os.path.islink(lfile):
    os.remove(lfile)
os.symlink(setupfile, lfile)
