#!/usr/bin/env python

from __future__ import (absolute_import, division, print_function, 
    unicode_literals)

import sys
import os
import stat
import inspect
import re
import argparse
import subprocess as sp

# The directory where this script is located.
scriptdir = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))

# Add our tools directory to the search path.
sys.path.append(os.path.join(scriptdir, "tools"))

# Import our helper utilities
import desibuild as tools
from desibuild import clr as clr


# Get our options

parser = argparse.ArgumentParser(description="Build conda packages.")

parser.add_argument("--versions", required=True, type=str, default=None,
    help="Path to the versions file.  File format is 3 columns of "
    "<package name> <git URL> <branch/tag name>.")

parser.add_argument("--upload", required=False, action="store_true", 
    default=False, help="Do not build packages, just upload")

args = parser.parse_args()

# Get package information

pkgs = tools.load_versions(args.versions)

# Add the desibuild git revision as the version of the desi metapackage

buildver = tools.build_version(scriptdir)
p = {}
p["name"] = "desi"
p["version"] = buildver
p["url"] = ""
pkgs.append(p)

if args.upload:
    conda = sp.check_output("which conda", shell=True)
    condaroot = os.path.dirname(conda)
    condbld = os.path.join(condaroot, "..", "conda-bld")

    plat = sp.check_output("conda info | grep platform | awk '{print $3}'", shell=True)

    platdir = os.path.join(condabld, plat)

    for pkg in pkgs:
        print("Uploading package {}".format(pkg["name"]))
        tarball = os.path.join(platdir, "{}-{}-0.tar.bz2".format(pkg["name"], pkg["version"]))
        sp.check_call("anaconda upload {}".format(tarball), shell=True)

else:

    # Conda recipe location

    condadir = os.path.join(scriptdir, "conda")

    for pkg in pkgs:
        print("Working on package {}".format(pkg["name"]))

        pkgdir = os.path.join(condadir, pkg["name"])

        # Process all package input files

        scriptmod = (stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR
                    | stat.S_IRGRP | stat.S_IWGRP | stat.S_IXGRP
                    | stat.S_IROTH | stat.S_IXOTH)

        inpat = re.compile(r"(.*)\.in")
        shpat = re.compile(r"(.*)\.sh")
        purge = []

        for root, dirs, files in os.walk(pkgdir, topdown=True):
            for f in files:
                mat = inpat.match(f)
                if mat is not None:
                    filein = os.path.join(pkgdir, f)
                    fileout = os.path.join(pkgdir, mat.group(1))
                    with open(fileout, "w") as output:
                        with open(filein, "r") as input:
                            for line in input:
                                for other in pkgs:
                                    line = re.sub("@{}_version@".format(other["name"]), 
                                        other["version"], line)
                                    line = re.sub("@{}_url@".format(other["name"]), 
                                        other["url"], line)
                                output.write(line)
                    purge.append(fileout)
                    if shpat.match(fileout) is not None:
                        os.chmod(fileout, scriptmod)
            break

        # Run conda build

        com = ["conda", "build", pkgdir]
        tools.live_report(com, "conda")

        # Clean up

        for f in purge:
            if os.path.isfile(f):
                os.remove(f)

