#!/bin/bash


show_help () {
    echo "" >&2
    echo "Usage:  $0" >&2
    echo "    -p <prefix>" >&2
    echo "    -v <version file>" >&2
    echo "    [-r <value to set as DESI_ROOT>]" >&2
    echo "    [-c (use common install prefix)]" >&2
    echo "    [-e <module init>]" >&2
    echo "    [-s <directory of single package to install>]" >&2
    echo "" >&2
    echo "    Install current git clone states into prefix.  Only the" >&2
    echo "    packages specified in the version file will be installed." >&2
    echo "    This script should be run from the directory containing" >&2
    echo "    your git clones.  The module init file should contain" >&2
    echo "    module file commands to load external dependencies." >&2
    echo "" >&2
    echo "    If the -c option is given, install all packages to a" >&2
    echo "    common directory (the prefix)." >&2
    echo "" >&2
    echo "    Alternatively, specify the directory containing a single" >&2
    echo "    package to install, as well as the prefix for the" >&2
    echo "    installation.  The name of the package is inferred from" >&2
    echo "    the basename of the directory."
    echo "" >&2
    echo "" >&2
}


# Return value of get_pkg_version, to avoid spawning
# a subshell.

global_get_version=""

get_pkg_version () {
    # get package version from current git
    local pkgtag=$(git branch | grep -e '^\*' | awk '{print $2}')
    local pkghash=$(git rev-parse --short HEAD)

    # if the branch has a special name (work-<blah>), then it
    # is actually a working branch created from a tag by desi_source.
    # strip that off.  If this is a tag, then the hash is
    # redundant so we do not include it.

    local is_tag=$(echo ${pkgtag} | sed -e "s#work-.*#yes#")
    if [ "${is_tag}" = "yes" ]; then
        pkgtag=$(echo ${pkgtag} | sed -e "s#work-##")
        global_get_version="${pkgtag}"
    else
        global_get_version="${pkgtag}-${pkghash}"
    fi
}


# This is a global variable that is used when calling
# the install_package function.  This is the return
# value, and enables us to call the function in the 
# same shell without spawning a subshell.

global_pkgver=""

install_package () {
    # After the package is installed, it modifies the 
    # environment so that future packages can use previous
    # ones.

    local pkg="$1"
    local pkgdir="$2"
    local prefix="$3"
    local setup="$4"
    local moddir="$5"
    local modtemplate="$6"
    local vertemplate="$7"
    local logroot="$8"

    local mode="normal"

    echo "Installing ${pkg}" >&2

    local logfile=""
    if [ "x${logroot}" = "x" ]; then
        logfile="/dev/stderr"
        mode="single"
    else
        logfile="${logroot}_${pkg}"
        rm -f "${logfile}"
    fi

    pushd "${pkgdir}" > /dev/null

    get_pkg_version
    pkgver="${global_get_version}"

    # set package prefix
    local pkgprefix="${prefix}/${pkg}/${pkgver}"
    mkdir -p "${pkgprefix}" >> "${logfile}" 2>&1
    
    # uppercase package name
    local pkgup=$(echo ${pkg} | tr '[:lower:]' '[:upper:]')

    # add lines to the shell-snippet alternative to modulefiles,
    # as well as installing the module files.

    echo "# Settings for ${pkg}" >> "${setup}"
    echo "export DESI_${pkgup}_VERSION=\"${pkgver}\"" >> "${setup}"

    local pkgmoddir="${moddir}/${pkg}"
    mkdir -p "${pkgmoddir}" >> "${logfile}" 2>&1

    local outmod="${pkgmoddir}/${pkgver}"
    local outver="${pkgmoddir}/.version_new"

    # install stub of module file
    cat "${modtemplate}" | sed \
        -e "s#@PACKAGE@#${pkg}#g" \
        -e "s#@UPPACKAGE@#_${pkgup}#g" \
        -e "s#@VERSION@#${pkgver}#g" \
        > "${outmod}"

    if [ "${mode}" != "single" ]; then
        # install the module version file into the temporary location
        cat "${vertemplate}" | sed -e "s#@VERSION@#${pkgver}#g" > "${outver}"
    fi

    # do the install
    if [ "${pkg}" = "specex" ]; then

        # This package has executables and compiled libraries

        mkdir -p "${pkgprefix}/bin" >> "${logfile}" 2>&1
        mkdir -p "${pkgprefix}/lib" >> "${logfile}" 2>&1

        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"

        export CPATH="${pkgprefix}/include:${CPATH}"
        echo "export CPATH=\"${pkgprefix}/include:\${CPATH}\"" >> "${setup}"
        
        export LIBRARY_PATH="${pkgprefix}/lib:${LIBRARY_PATH}"
        echo "export LIBRARY_PATH=\"${pkgprefix}/lib:\${LIBRARY_PATH}\"" >> "${setup}"
        
        export LD_LIBRARY_PATH="${pkgprefix}/lib:${LD_LIBRARY_PATH}"
        echo "export LD_LIBRARY_PATH=\"${pkgprefix}/lib:\${LD_LIBRARY_PATH}\"" >> "${setup}"
        
        export HARP_PLUGIN_PATH="${pkgprefix}/lib"
        echo "export HARP_PLUGIN_PATH=\"${pkgprefix}/lib\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path CPATH \"${pkgprefix}/include\"" >> "${outmod}"
        echo "prepend-path LIBRARY_PATH \"${pkgprefix}/lib\"" >> "${outmod}"
        echo "prepend-path LD_LIBRARY_PATH \"${pkgprefix}/lib\"" >> "${outmod}"
        echo "setenv HARP_PLUGIN_PATH \"${pkgprefix}/lib\"" >> "${outmod}"

        eval "SPECEX_PREFIX=\"${pkgprefix}\" make install" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "fiberassign" ]; then

        # This package has executables and a python package.

        mkdir -p "${pkgprefix}/bin" >> "${logfile}" 2>&1
        mkdir -p "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1
        
        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"

        export PYTHONPATH="${pkgprefix}/lib/python${pysite}/site-packages:${PYTHONPATH}"
        echo "export PYTHONPATH=\"${pkgprefix}/lib/python${pysite}/site-packages:\${PYTHONPATH}\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path PYTHONPATH \"${pkgprefix}/lib/python${pysite}/site-packages\"" >> "${outmod}"

        # First install compiled code

        eval "INSTALL=\"${pkgprefix}/bin\" make install" >> "${logfile}" 2>&1

        # Now copy scripts and python package into place

        cp -a bin/* "${pkgprefix}/bin/" >> "${logfile}" 2>&1
        chmod -R +x "${pkgprefix}/bin/" >> "${logfile}" 2>&1
        cp -a py/fiberassign "${pkgprefix}/lib/python${pysite}/site-packages/" >> "${logfile}" 2>&1

        python -m compileall -f "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "redmonster" ]; then

        # We just copy the source tree into the install prefix...

        cp -a * "${pkgprefix}/" >> "${logfile}" 2>&1

        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"
        
        export PYTHONPATH="${pkgprefix}/python:${PYTHONPATH}"
        echo "export PYTHONPATH=\"${pkgprefix}/python:\${PYTHONPATH}\"" >> "${setup}"
        
        export REDMONSTER_TEMPLATES_DIR="${pkgprefix}/templates"
        echo "export REDMONSTER_TEMPLATES_DIR=\"${pkgprefix}/templates\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path PYTHONPATH \"${pkgprefix}/python\"" >> "${outmod}"
        echo "setenv REDMONSTER_TEMPLATES_DIR \"${pkgprefix}/templates\"" >> "${outmod}"

        python -m compileall -f "${pkgprefix}/python" >> "${logfile}" 2>&1

        echo "Redmonster installed" >> "${logfile}"

    elif [ "${pkg}" = "teststand" ]; then

        # We just copy the bin, data, and python directories
        # into the prefix.

        mkdir -p "${pkgprefix}/bin" >> "${logfile}" 2>&1
        mkdir -p "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"

        export PYTHONPATH="${pkgprefix}/lib/python${pysite}/site-packages:${PYTHONPATH}"
        echo "export PYTHONPATH=\"${pkgprefix}/lib/python${pysite}/site-packages:\${PYTHONPATH}\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path PYTHONPATH \"${pkgprefix}/lib/python${pysite}/site-packages\"" >> "${outmod}"

        cp -a data "${pkgprefix}/" >> "${logfile}" 2>&1

        cp -a bin/* "${pkgprefix}/bin/" >> "${logfile}" 2>&1
        chmod -R +x "${pkgprefix}/bin/" >> "${logfile}" 2>&1
        
        cp -a py/desispec_tools "${pkgprefix}/lib/python${pysite}/site-packages/" >> "${logfile}" 2>&1

        python -m compileall -f "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "desimodel" ]; then

        # This is a standard DESI python package, but we also must set
        # the DESIMODEL environment variable and download the data files
        # with svn.

        mkdir -p "${pkgprefix}/bin" >> "${logfile}" 2>&1
        mkdir -p "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"
        
        export PYTHONPATH="${pkgprefix}/lib/python${pysite}/site-packages:${PYTHONPATH}"
        echo "export PYTHONPATH=\"${pkgprefix}/lib/python${pysite}/site-packages:\${PYTHONPATH}\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path PYTHONPATH \"${pkgprefix}/lib/python${pysite}/site-packages\"" >> "${outmod}"

        python setup.py install --prefix=${pkgprefix} >> "${logfile}" 2>&1

        python -m compileall -f "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

        datascript=$(printf "%s/etc/%s" "$(pwd)" "$(basename ./etc/desimodel_data.sh)")
        pushd "${pkgprefix}" > /dev/null
        mastercheck=$(echo ${pkgver} | sed -e "s#master.*#master#")
        if [ "x${mastercheck}" = "xmaster" ]; then
            export DESIMODEL_VERSION="trunk"
        else
            export DESIMODEL_VERSION="${pkgver}"
        fi
        eval "/bin/bash ${datascript}"
        popd > /dev/null

        export DESIMODEL="${pkgprefix}"
        echo "export DESIMODEL=\"${pkgprefix}\"" >> "${setup}"
        echo "setenv DESIMODEL \"${pkgprefix}\"" >> "${outmod}"

    else

        # Assume that this is just a standard DESI python package

        mkdir -p "${pkgprefix}/bin" >> "${logfile}" 2>&1
        mkdir -p "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

        export PATH="${pkgprefix}/bin:${PATH}"
        echo "export PATH=\"${pkgprefix}/bin:\${PATH}\"" >> "${setup}"
        
        export PYTHONPATH="${pkgprefix}/lib/python${pysite}/site-packages:${PYTHONPATH}"
        echo "export PYTHONPATH=\"${pkgprefix}/lib/python${pysite}/site-packages:\${PYTHONPATH}\"" >> "${setup}"

        echo "prepend-path PATH \"${pkgprefix}/bin\"" >> "${outmod}"
        echo "prepend-path PYTHONPATH \"${pkgprefix}/lib/python${pysite}/site-packages\"" >> "${outmod}"

        python setup.py install --prefix=${pkgprefix} >> "${logfile}" 2>&1

        python -m compileall -f "${pkgprefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    fi

    echo "" >> "${setup}"
    echo "" >> "${outmod}"
    
    popd > /dev/null

    global_pkgver="${pkgver}"
}


install_package_common () {
    # This installs a package to the common prefix.  The setup
    # of environment variables is simpler in this case.

    local pkg="$1"
    local pkgdir="$2"
    local prefix="$3"
    local setup="$4"
    local outmod="$5"
    local logroot="$6"

    local mode="normal"

    echo "Installing ${pkg} to common prefix" >&2

    pushd "${pkgdir}" > /dev/null

    get_pkg_version
    pkgver="${global_get_version}"

    local logfile=""
    if [ "x${logroot}" = "x" ]; then
        logfile="/dev/stderr"
        mode="single"
    else
        logfile="${logroot}_${pkg}"
        rm -f "${logfile}"
    fi

    # set package prefix
    mkdir -p "${prefix}" >> "${logfile}" 2>&1
    
    # uppercase package name
    local pkgup=$(echo ${pkg} | tr '[:lower:]' '[:upper:]')

    # add lines to the shell-snippet alternative to modulefiles,
    # as well as installing the module files.

    echo "# Settings for ${pkg}" >> "${setup}"
    echo "export DESI_${pkgup}_VERSION=\"${pkgver}\"" >> "${setup}"
    echo "setenv DESI_${pkgup}_VERSION \"${pkgver}\"" >> "${outmod}"

    # do the install
    if [ "${pkg}" = "specex" ]; then

        # This package has executables and compiled libraries
        
        export HARP_PLUGIN_PATH="${prefix}/lib"
        echo "export HARP_PLUGIN_PATH=\"${prefix}/lib\"" >> "${setup}"
        echo "setenv HARP_PLUGIN_PATH \"${prefix}/lib\"" >> "${outmod}"

        eval "SPECEX_PREFIX=\"${prefix}\" make install" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "fiberassign" ]; then

        # First install compiled code

        eval "INSTALL=\"${prefix}/bin\" make install" >> "${logfile}" 2>&1

        # Now copy scripts and python package into place

        cp -a bin/* "${prefix}/bin/" >> "${logfile}" 2>&1
        chmod -R +x "${prefix}/bin/" >> "${logfile}" 2>&1
        cp -a py/fiberassign "${prefix}/lib/python${pysite}/site-packages/" >> "${logfile}" 2>&1

        python -m compileall -f "${prefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "redmonster" ]; then

        export REDMONSTER_TEMPLATES_DIR="${prefix}/templates"
        echo "export REDMONSTER_TEMPLATES_DIR=\"${prefix}/templates\"" >> "${setup}"
        echo "setenv REDMONSTER_TEMPLATES_DIR \"${prefix}/templates\"" >> "${outmod}"

        # We just copy the source tree into the install prefix...

        cp -a templates "${prefix}/" >> "${logfile}" 2>&1
        cp -a conf "${prefix}/" >> "${logfile}" 2>&1
        cp -a pro "${prefix}/" >> "${logfile}" 2>&1

        cp -a bin/* "${prefix}/bin/" >> "${logfile}" 2>&1
        chmod -R +x "${prefix}/bin/" >> "${logfile}" 2>&1
        
        cp -a python/redmonster "${prefix}/lib/python${pysite}/site-packages/" >> "${logfile}" 2>&1

        python -m compileall -f "${prefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "teststand" ]; then

        # We just copy the bin, data, and python directories
        # into the prefix.

        cp -a data "${prefix}/" >> "${logfile}" 2>&1

        cp -a bin/* "${prefix}/bin/" >> "${logfile}" 2>&1
        chmod -R +x "${prefix}/bin/" >> "${logfile}" 2>&1
        
        cp -a py/desispec_tools "${prefix}/lib/python${pysite}/site-packages/" >> "${logfile}" 2>&1

        python -m compileall -f "${prefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    elif [ "${pkg}" = "desimodel" ]; then

        python setup.py install --prefix=${prefix} >> "${logfile}" 2>&1

        python -m compileall -f "${prefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

        datascript=$(printf "%s/etc/%s" "$(pwd)" "$(basename ./etc/desimodel_data.sh)")
        mkdir -p "${prefix}/desimodel"
        pushd "${prefix}/desimodel" > /dev/null
        mastercheck=$(echo ${pkgver} | sed -e "s#master.*#master#")
        if [ "x${mastercheck}" = "xmaster" ]; then
            export DESIMODEL_VERSION="trunk"
        else
            export DESIMODEL_VERSION="${pkgver}"
        fi
        eval "/bin/bash ${datascript}"
        popd > /dev/null

        export DESIMODEL="${prefix}/desimodel"
        echo "export DESIMODEL=\"${prefix}/desimodel\"" >> "${setup}"
        echo "setenv DESIMODEL \"${prefix}/desimodel\"" >> "${outmod}"

    else

        # Assume that this is just a standard DESI python package

        python setup.py install --prefix=${prefix} >> "${logfile}" 2>&1

        python -m compileall -f "${prefix}/lib/python${pysite}/site-packages" >> "${logfile}" 2>&1

    fi

    echo "" >> "${setup}"
    echo "" >> "${outmod}"
    
    popd > /dev/null

    global_pkgver="${pkgver}"
}


install_packages () {
    # This function is run in a subshell.  As each package is installed,
    # it modifies the environment so that future packages can use previous
    # ones.  The parent shell environment is not modified.  The packages
    # listed in the version file should be in order of increasing
    # dependencies.

    local versionfile="$1"
    local prefix="$2"
    local setup="$3"
    local moddir="$4"
    local modtemplate="$5"
    local vertemplate="$6"
    local logroot="$7"

    local dephash=""

    local pkg=""
    
    while IFS='' read -r line || [[ -n "${line}" ]]; do
        # get package name from versions file
        pkg=$(echo ${line} | awk '{print $1}')

        install_package "${pkg}" "${pkg}" "${prefix}" "${setup}" "${moddir}" "${modtemplate}" "${vertemplate}" "${logroot}"
        pkgver="${global_pkgver}"
        
        dephash="${dephash}${pkgver}"

    done < "${versionfile}"

    echo "${dephash}"
}


install_packages_common () {
    # This function is run in a subshell.  As each package is installed,
    # it modifies the environment so that future packages can use previous
    # ones.  The parent shell environment is not modified.  The packages
    # listed in the version file should be in order of increasing
    # dependencies.

    local versionfile="$1"
    local prefix="$2"
    local setup="$3"
    local modfile="$4"
    local logroot="$5"

    # add the common prefix locations to setup and module file

    mkdir -p "${prefix}/bin"
    mkdir -p "${prefix}/include"
    mkdir -p "${prefix}/lib/python${pysite}/site-packages"

    export PATH="${prefix}/bin:${PATH}"
    echo "export PATH=\"${prefix}/bin:\${PATH}\"" >> "${setup}"
    echo "prepend-path PATH \"${prefix}/bin\"" >> "${modfile}"

    export CPATH="${prefix}/include:${CPATH}"
    echo "export CPATH=\"${prefix}/include:\${CPATH}\"" >> "${setup}"
    echo "prepend-path CPATH \"${prefix}/include\"" >> "${modfile}"
    
    export LIBRARY_PATH="${prefix}/lib:${LIBRARY_PATH}"
    echo "export LIBRARY_PATH=\"${prefix}/lib:\${LIBRARY_PATH}\"" >> "${setup}"
    echo "prepend-path LIBRARY_PATH \"${prefix}/lib\"" >> "${modfile}"
    
    export LD_LIBRARY_PATH="${prefix}/lib:${LD_LIBRARY_PATH}"
    echo "export LD_LIBRARY_PATH=\"${prefix}/lib:\${LD_LIBRARY_PATH}\"" >> "${setup}"
    echo "prepend-path LD_LIBRARY_PATH \"${prefix}/lib\"" >> "${modfile}"

    export PYTHONPATH="${prefix}/lib/python${pysite}/site-packages:${PYTHONPATH}"
    echo "export PYTHONPATH=\"${prefix}/lib/python${pysite}/site-packages:\${PYTHONPATH}\"" >> "${setup}"
    echo "prepend-path PYTHONPATH \"${prefix}/lib/python${pysite}/site-packages\"" >> "${modfile}"

    echo "" >> "${setup}"
    echo "" >> "${modfile}"

    local dephash=""

    local pkg=""
    
    while IFS='' read -r line || [[ -n "${line}" ]]; do
        # get package name from versions file
        pkg=$(echo ${line} | awk '{print $1}')

        install_package_common "${pkg}" "${pkg}" "${prefix}" "${setup}" "${modfile}" "${logroot}"
        pkgver="${global_pkgver}"
        
        dephash="${dephash}${pkgver}"

    done < "${versionfile}"

    echo "${dephash}"
}


prefix=""
common="no"
versionfile=""
moduleinit=""
single=""
desiroot="/project/projectdirs/desi"

while getopts ":p:v:ce:s:r:" opt; do
    case $opt in
        p)
            prefix=$OPTARG
            ;;
        v)
            versionfile=$OPTARG
            ;;
        c)  common="yes"
            ;;
        e)
            moduleinit=$OPTARG
            ;;
        s)
            single=$OPTARG
            ;;
        r)
            desiroot=$OPTARG
            ;;
        \?)
            show_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            show_help
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ "x${prefix}" = "x" ]; then
    show_help
    exit 1
fi

if [ "x${single}" == "x" ]; then
    if [ "x${versionfile}" == "x" ]; then
        show_help
        exit 1
    fi
fi

# directory with git clones (the current one)
srcdir=$(pwd -P)

# get the absolute path to the directory with this script
pushd $(dirname $0) > /dev/null
base=$(pwd -P)
popd > /dev/null

# the location of the modulefile and version templates
modtemplate="${base}/modulefiles/template.module"
vertemplate="${base}/modulefiles/template.version"

# version of python site directory
pysite=$(python --version 2>&1 | awk '{print $2}' | sed -e "s#\(.*\)\.\(.*\)\..*#\1.\2#")

# create main prefix if needed
mkdir -p "${prefix}"

# create the modulefile directory
moddir="${prefix}/modulefiles"
mkdir -p "${moddir}"

# what branch/tag of desibuild are we in?
pushd "${base}" > /dev/null
get_pkg_version
buildver="${global_get_version}"
popd > /dev/null

if [ "x${single}" != "x" ]; then
    # we are just installing a single package.

    pkg=$(basename "${single}")

    if [ "${common}" = "yes" ]; then
        setup="${prefix}/setup.sh"
        install_package_common "${pkg}" "${single}" "${prefix}" "${setup}" "/dev/null" ""
    else
        install_package "${pkg}" "${single}" "${prefix}" "/dev/null" "${moddir}" "${modtemplate}" "${vertemplate}" ""
    fi
    
    pkgver="${global_pkgver}"

else
    # we are doing a normal install using a version text
    # file and installing the high level desi module.

    # create the shell-snippet alternative to modulefiles
    setup="${prefix}/setup.sh"
    echo "# Versions of DESI packages" > "${setup}"
    echo "" >> "${setup}"

    # process all packages

    logroot="${srcdir}/setup"

    tempmod=""
    if [ "${common}" = "yes" ]; then
        tempmod="${srcdir}/tmp.module"
        rm -f "${tempmod}"
        dephash=$(install_packages_common "${versionfile}" "${prefix}" "${setup}" "${tempmod}" "${logroot}")
    else
        dephash=$(install_packages "${versionfile}" "${prefix}" "${setup}" "${moddir}" "${modtemplate}" "${vertemplate}" "${logroot}")
    fi

    # Now we create a top-level module file that loads the others.

    # make a truncated md5 sum of the dependency versions
    desihash=$(echo ${dephash} | md5sum | cut -c1-8)

    # build the main desi version from the desibuild git tag and the dependency hash
    desiver="${buildver}_${desihash}"

    echo "export DESI_VERSION=\"${desiver}\"" >> "${setup}"
    echo "" >> "${setup}"

    pkgmoddir="${moddir}/desi"
    mkdir -p "${pkgmoddir}"

    outmod="${pkgmoddir}/${desiver}"
    outver="${pkgmoddir}/.version_new"

    # install stub of module file
    cat "${modtemplate}" | sed \
        -e "s#@PACKAGE@#desi#g" \
        -e "s#@UPPACKAGE@##g" \
        -e "s#@VERSION@#${desiver}#g" \
        > "${outmod}"

    echo "conflict desi" >> "${outmod}"
    echo "" >> "${outmod}"
    echo "setenv DESI_ROOT \"${desiroot}\"" >> "${outmod}"
    echo "" >> "${outmod}"

    # install the module version file into the temporary location
    cat "${vertemplate}" | sed -e "s#@VERSION@#${desiver}#g" > "${outver}"

    # load any init commands
    if [ "x${moduleinit}" != "x" ]; then
        cat "${moduleinit}" >> "${outmod}"
    fi

    if [ "${common}" = "yes" ]; then
        # we just append all the per-package commands to the main
        # desi module file.

        if [ "x${tempmod}" = "x" ]; then
            echo "\n\nERROR: Temporary package module command file name not set" >&2
            echo "ERROR: This should never happen!\n\n" >&2
            exit 1
        fi
        if [ ! -e "${tempmod}" ]; then
            echo "\n\nERROR: Temporary package module command file does not exist" >&2
            echo "ERROR: This likely means something failed during package installation" >&2
            exit 1
        fi

        echo "" >> "${outmod}"
        cat "${tempmod}" >> "${outmod}"
        rm -f "${tempmod}"

    else

        # iterate over the package versions and append the commands
        # to load them.

        while IFS='' read -r line || [[ -n "${line}" ]]; do
            pkg=$(echo ${line} | awk '{print $1}')

            # get package version from current git
            cd "${pkg}"
            get_pkg_version
            pkgver="${global_get_version}"

            echo "" >> "${outmod}"
            echo "if [ module-info mode load ] {" >> "${outmod}"
            echo "  if [ is-loaded ${pkg} ] {" >> "${outmod}"
            echo "  } else {" >> "${outmod}"
            echo "    module load ${pkg}/${pkgver}" >> "${outmod}"
            echo "  }" >> "${outmod}"
            echo "}" >> "${outmod}"

            cd ..
        done < "${versionfile}"

    fi

    echo "" >> "${outmod}"

fi



